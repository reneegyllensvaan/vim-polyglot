let s:globs = {
  \ 'Dockerfile': '*.dockerfile,*.dock,*.Dockerfile,Dockerfile,dockerfile,Dockerfile*',
  \ 'Jenkinsfile': '*.jenkinsfile,*.Jenkinsfile,Jenkinsfile,Jenkinsfile*',
  \ 'automake': '*.mak,*.dsp,*.mk,Makefile.am,makefile.am,GNUmakefile.am',
  \ 'awk': '*.awk,*.gawk',
  \ 'c': '*.c,*.cats,*.h,*.idc,*.qc',
  \ 'cfg': '*.cfg,*.hgrc,*hgrc',
  \ 'cmake': '*.cmake,*.cmake.in,CMakeLists.txt',
  \ 'conf': '*.conf,auto.master,config',
  \ 'config': 'configure.in,configure.ac,Pipfile',
  \ 'cpp': '*.cpp,*.c++,*.cc,*.cp,*.cxx,*.h,*.h++,*.hh,*.hpp,*.hxx,*.inc,*.inl,*.ipp,*.tcc,*.tpp,*.moc,*.tlh',
  \ 'crontab': 'crontab,crontab.*',
  \ 'diff': '*.diff,*.rej',
  \ 'dot': '*.dot,*.gv',
  \ 'dune': 'jbuild,dune,dune-project,dune-workspace',
  \ 'fish': '*.fish',
  \ 'flow': '*.flow',
  \ 'gdb': '.gdbinit',
  \ 'gitcommit': 'COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG',
  \ 'gitconfig': '*.gitconfig,.gitconfig,.gitmodules',
  \ 'gitignore': '.gitignore',
  \ 'gitrebase': 'git-rebase-todo',
  \ 'gitsendemail': '.gitsendemail.*',
  \ 'graphql': '*.graphql,*.gql,*.graphqls',
  \ 'groovy': '*.groovy,*.grt,*.gtpl,*.gvy,*.gradle,Jenkinsfile',
  \ 'help': '',
  \ 'html': '*.html,*.htm,*.html.hl,*.inc,*.st,*.xht,*.xhtml',
  \ 'i3config': '*.i3.config,*.i3config,i3.config,i3config,.i3.config,.i3config',
  \ 'javascript': '*.js,*._js,*.bones,*.cjs,*.es,*.es6,*.frag,*.gs,*.jake,*.jsb,*.jscad,*.jsfl,*.jsm,*.jss,*.mjs,*.njs,*.pac,*.sjs,*.ssjs,*.xsjs,*.xsjslib,*.javascript,Jakefile',
  \ 'javascriptreact': '*.jsx',
  \ 'json': '*.json,*.avsc,*.geojson,*.gltf,*.har,*.ice,*.JSON-tmLanguage,*.jsonl,*.mcmeta,*.tfstate,*.tfstate.backup,*.topojson,*.webapp,*.webmanifest,*.yy,*.yyp,*.jsonp,*.template,.arcconfig,.htmlhintrc,.tern-config,.tern-project,.watchmanconfig,composer.lock,mcmod.info,Pipfile.lock',
  \ 'json5': '*.json5',
  \ 'jsonnet': '*.jsonnet,*.libsonnet',
  \ 'jst': '*.ejs,*.ect,*.jst',
  \ 'ld': '*.ld',
  \ 'ldif': '*.ldif',
  \ 'llvm': '*.ll',
  \ 'loginaccess': '',
  \ 'logindefs': '',
  \ 'lua': '*.lua,*.fcgi,*.nse,*.p8,*.pd_lua,*.rbxs,*.rockspec,*.wlua,.luacheckrc',
  \ 'mail': '*.eml,snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,{neo,}mutt[[:alnum:]._-]\\\{6\},reportbug-*',
  \ 'mailaliases': '',
  \ 'mailcap': '.mailcap,mailcap',
  \ 'markdown': '*.md,*.markdown,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.workbook,contents.lr',
  \ 'mason': '*.mason,*.mhtml,*.comp',
  \ 'messages': '',
  \ 'named': 'named*.conf,rndc*.conf,rndc*.key',
  \ 'neomuttrc': 'Neomuttrc,.neomuttrc*,neomuttrc*,Neomuttrc*',
  \ 'netrc': '.netrc',
  \ 'nim': '*.nim,*.nim.cfg,*.nimble,*.nimrod,*.nims,nim.cfg',
  \ 'oasis': '_oasis',
  \ 'objc': '*.m,*.h',
  \ 'ocaml': '*.ml,*.eliom,*.eliomi,*.ml4,*.mli,*.mll,*.mly,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo,.ocamlinit',
  \ 'ocamlbuild_tags': '_tags',
  \ 'ocpbuild': '*.ocp',
  \ 'ocpbuildroot': '*.root',
  \ 'omake': '*.om,OMakefile,OMakeroot,OMakeroot.in',
  \ 'opam': '*.opam,*.opam.template,opam',
  \ 'passwd': '',
  \ 'perl': '*.pl,*.al,*.cgi,*.fcgi,*.perl,*.ph,*.plx,*.pm,*.psgi,*.t,Makefile.PL,Rexfile,ack,cpanfile,example.gitolite.rc,.gitolite.rc',
  \ 'pod': '*.pod',
  \ 'pullrequest': 'PULLREQ_EDITMSG',
  \ 'python': '*.py,*.cgi,*.fcgi,*.gyp,*.gypi,*.lmi,*.py3,*.pyde,*.pyi,*.pyp,*.pyt,*.pyw,*.rpy,*.smk,*.spec,*.tac,*.wsgi,*.xpy,*.ptl,.gclient,DEPS,SConscript,SConstruct,Snakefile,wscript,.pythonrc,.pythonstartup',
  \ 'qmake': '*.pro,*.pri',
  \ 'rc': '*.rc,*.rch',
  \ 'readline': '.inputrc,inputrc',
  \ 'reason': '*.re,*.rei',
  \ 'requirements': '*.pip,*requirements.{txt,in},*require.{txt,in},constraints.{txt,in}',
  \ 'rst': '*.rst,*.rest,*.rest.txt,*.rst.txt',
  \ 'rust': '*.rs,*.rs.in',
  \ 'sass': '*.sass',
  \ 'screen': '.screenrc,screenrc',
  \ 'sexplib': '*.sexp',
  \ 'sh': '*.sh,*.bash,*.bats,*.cgi,*.command,*.env,*.fcgi,*.ksh,*.sh.in,*.tmux,*.tool,.bash_aliases,.bash_history,.bash_logout,.bash_profile,.bashrc,.cshrc,.env,.env.example,.flaskenv,.login,.profile,9fs,PKGBUILD,bash_aliases,bash_logout,bash_profile,bashrc,cshrc,gradlew,login,man,profile,zlogin,zlogout,zprofile,zshenv,zshrc',
  \ 'sql': '*.pls,*.bdy,*.ddl,*.fnc,*.pck,*.pkb,*.pks,*.plb,*.plsql,*.prc,*.spc,*.sql,*.tpb,*.tps,*.trg,*.vw,*.tyb,*.typ,*.tyc',
  \ 'sshconfig': 'ssh_config',
  \ 'sshdconfig': 'sshd_config',
  \ 'tablegen': '*.td',
  \ 'terminfo': '*.ti',
  \ 'text': '*.text,README',
  \ 'tmux': '.tmux*.conf',
  \ 'tt2': '*.tt2',
  \ 'tt2html': '*.tt2',
  \ 'typescript': '*.ts',
  \ 'typescriptreact': '*.tsx',
  \ 'udevconf': '',
  \ 'udevperm': '',
  \ 'vim': '*.vim,*.vba,.exrc,_exrc,*vimrc*',
  \ 'viminfo': '.viminfo,_viminfo',
  \ 'xdefaults': '*.ad,.Xdefaults,.Xpdefaults,.Xresources,xdm-config,Xresources*',
  \ 'xml': '*.xml,*.adml,*.admx,*.ant,*.axml,*.builds,*.ccproj,*.ccxml,*.clixml,*.cproject,*.cscfg,*.csdef,*.csl,*.csproj,*.ct,*.depproj,*.dita,*.ditamap,*.ditaval,*.dll.config,*.dotsettings,*.filters,*.fsproj,*.fxml,*.glade,*.gml,*.gmx,*.grxml,*.gst,*.iml,*.ivy,*.jelly,*.jsproj,*.kml,*.launch,*.mdpolicy,*.mjml,*.mm,*.mod,*.mxml,*.natvis,*.ncl,*.ndproj,*.nproj,*.nuspec,*.odd,*.osm,*.pkgproj,*.pluginspec,*.proj,*.props,*.psc1,*.pt,*.rdf,*.resx,*.rss,*.sch,*.scxml,*.sfproj,*.shproj,*.srdf,*.storyboard,*.sublime-snippet,*.targets,*.tml,*.ui,*.urdf,*.ux,*.vbproj,*.vcxproj,*.vsixmanifest,*.vssettings,*.vstemplate,*.vxml,*.wixproj,*.workflow,*.wsdl,*.wsf,*.wxi,*.wxl,*.wxs,*.x3d,*.xacro,*.xaml,*.xib,*.xlf,*.xliff,*.xmi,*.xml.dist,*.xproj,*.xsd,*.xspec,*.xul,*.zcml,*.cdxml,*.tpm,*.csproj.user,*.wpl,.classpath,.cproject,.project,App.config,NuGet.config,Settings.StyleCop,Web.Debug.config,Web.Release.config,Web.config,packages.config,*fglrxrc',
  \ 'xmodmap': '*Xmodmap,*xmodmap*',
  \ 'xs': '*.xs',
  \ 'yaml': '*.yml,*.mir,*.reek,*.rviz,*.sublime-syntax,*.syntax,*.yaml,*.yaml-tmlanguage,*.yaml.sed,*.yml.mysql,.clang-format,.clang-tidy,.gemrc,glide.lock,yarn.lock,fish_history,fish_read_history',
  \ 'yaml.docker-compose': 'docker-compose*.yaml,docker-compose*.yml',
  \ 'zsh': '*.zsh,.zshrc,.zshenv,.zlogin,.zprofile,.zlogout,.zlog*,.zcompdump*,.zfbfmarks,.zsh*',
  \}

func! polyglot#sleuth#GlobForFiletype(type)
  return get(s:globs, a:type, '')
endfunc
